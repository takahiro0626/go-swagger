// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"go-swagger/models"
)

// GetUsersHandlerFunc turns a function with the right signature into a get users handler
type GetUsersHandlerFunc func(GetUsersParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetUsersHandlerFunc) Handle(params GetUsersParams) middleware.Responder {
	return fn(params)
}

// GetUsersHandler interface for that can handle valid get users params
type GetUsersHandler interface {
	Handle(GetUsersParams) middleware.Responder
}

// NewGetUsers creates a new http.Handler for the get users operation
func NewGetUsers(ctx *middleware.Context, handler GetUsersHandler) *GetUsers {
	return &GetUsers{Context: ctx, Handler: handler}
}

/*
	GetUsers swagger:route GET /users users getUsers

return users

return users
*/
type GetUsers struct {
	Context *middleware.Context
	Handler GetUsersHandler
}

func (o *GetUsers) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetUsersParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetUsersOKBody get users o k body
//
// swagger:model GetUsersOKBody
type GetUsersOKBody struct {
	models.MainUsersResponse

	// users
	Users []*models.MainUser `json:"users"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetUsersOKBody) UnmarshalJSON(raw []byte) error {
	// GetUsersOKBodyAO0
	var getUsersOKBodyAO0 models.MainUsersResponse
	if err := swag.ReadJSON(raw, &getUsersOKBodyAO0); err != nil {
		return err
	}
	o.MainUsersResponse = getUsersOKBodyAO0

	// GetUsersOKBodyAO1
	var dataGetUsersOKBodyAO1 struct {
		Users []*models.MainUser `json:"users"`
	}
	if err := swag.ReadJSON(raw, &dataGetUsersOKBodyAO1); err != nil {
		return err
	}

	o.Users = dataGetUsersOKBodyAO1.Users

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetUsersOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	getUsersOKBodyAO0, err := swag.WriteJSON(o.MainUsersResponse)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getUsersOKBodyAO0)
	var dataGetUsersOKBodyAO1 struct {
		Users []*models.MainUser `json:"users"`
	}

	dataGetUsersOKBodyAO1.Users = o.Users

	jsonDataGetUsersOKBodyAO1, errGetUsersOKBodyAO1 := swag.WriteJSON(dataGetUsersOKBodyAO1)
	if errGetUsersOKBodyAO1 != nil {
		return nil, errGetUsersOKBodyAO1
	}
	_parts = append(_parts, jsonDataGetUsersOKBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get users o k body
func (o *GetUsersOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.MainUsersResponse
	if err := o.MainUsersResponse.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUsers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetUsersOKBody) validateUsers(formats strfmt.Registry) error {

	if swag.IsZero(o.Users) { // not required
		return nil
	}

	for i := 0; i < len(o.Users); i++ {
		if swag.IsZero(o.Users[i]) { // not required
			continue
		}

		if o.Users[i] != nil {
			if err := o.Users[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getUsersOK" + "." + "users" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getUsersOK" + "." + "users" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get users o k body based on the context it is used
func (o *GetUsersOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.MainUsersResponse
	if err := o.MainUsersResponse.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateUsers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetUsersOKBody) contextValidateUsers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Users); i++ {

		if o.Users[i] != nil {
			if err := o.Users[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getUsersOK" + "." + "users" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getUsersOK" + "." + "users" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetUsersOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetUsersOKBody) UnmarshalBinary(b []byte) error {
	var res GetUsersOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
