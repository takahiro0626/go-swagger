// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"go-swagger/models"
)

// GetUsersReader is a Reader for the GetUsers structure.
type GetUsersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetUsersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetUsersOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetUsersBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetUsersNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewGetUsersUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetUsersOK creates a GetUsersOK with default headers values
func NewGetUsersOK() *GetUsersOK {
	return &GetUsersOK{}
}

/*
GetUsersOK describes a response with status code 200, with default header values.

OK
*/
type GetUsersOK struct {
	Payload *GetUsersOKBody
}

// IsSuccess returns true when this get users o k response has a 2xx status code
func (o *GetUsersOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get users o k response has a 3xx status code
func (o *GetUsersOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get users o k response has a 4xx status code
func (o *GetUsersOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get users o k response has a 5xx status code
func (o *GetUsersOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get users o k response a status code equal to that given
func (o *GetUsersOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetUsersOK) Error() string {
	return fmt.Sprintf("[GET /users][%d] getUsersOK  %+v", 200, o.Payload)
}

func (o *GetUsersOK) String() string {
	return fmt.Sprintf("[GET /users][%d] getUsersOK  %+v", 200, o.Payload)
}

func (o *GetUsersOK) GetPayload() *GetUsersOKBody {
	return o.Payload
}

func (o *GetUsersOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetUsersOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUsersBadRequest creates a GetUsersBadRequest with default headers values
func NewGetUsersBadRequest() *GetUsersBadRequest {
	return &GetUsersBadRequest{}
}

/*
GetUsersBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetUsersBadRequest struct {
	Payload *models.MainErrorResponse
}

// IsSuccess returns true when this get users bad request response has a 2xx status code
func (o *GetUsersBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get users bad request response has a 3xx status code
func (o *GetUsersBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get users bad request response has a 4xx status code
func (o *GetUsersBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get users bad request response has a 5xx status code
func (o *GetUsersBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get users bad request response a status code equal to that given
func (o *GetUsersBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetUsersBadRequest) Error() string {
	return fmt.Sprintf("[GET /users][%d] getUsersBadRequest  %+v", 400, o.Payload)
}

func (o *GetUsersBadRequest) String() string {
	return fmt.Sprintf("[GET /users][%d] getUsersBadRequest  %+v", 400, o.Payload)
}

func (o *GetUsersBadRequest) GetPayload() *models.MainErrorResponse {
	return o.Payload
}

func (o *GetUsersBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MainErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUsersNotFound creates a GetUsersNotFound with default headers values
func NewGetUsersNotFound() *GetUsersNotFound {
	return &GetUsersNotFound{}
}

/*
GetUsersNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetUsersNotFound struct {
	Payload *models.MainErrorResponse
}

// IsSuccess returns true when this get users not found response has a 2xx status code
func (o *GetUsersNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get users not found response has a 3xx status code
func (o *GetUsersNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get users not found response has a 4xx status code
func (o *GetUsersNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get users not found response has a 5xx status code
func (o *GetUsersNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get users not found response a status code equal to that given
func (o *GetUsersNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetUsersNotFound) Error() string {
	return fmt.Sprintf("[GET /users][%d] getUsersNotFound  %+v", 404, o.Payload)
}

func (o *GetUsersNotFound) String() string {
	return fmt.Sprintf("[GET /users][%d] getUsersNotFound  %+v", 404, o.Payload)
}

func (o *GetUsersNotFound) GetPayload() *models.MainErrorResponse {
	return o.Payload
}

func (o *GetUsersNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MainErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUsersUnprocessableEntity creates a GetUsersUnprocessableEntity with default headers values
func NewGetUsersUnprocessableEntity() *GetUsersUnprocessableEntity {
	return &GetUsersUnprocessableEntity{}
}

/*
GetUsersUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Entity
*/
type GetUsersUnprocessableEntity struct {
	Payload *models.MainErrorResponse
}

// IsSuccess returns true when this get users unprocessable entity response has a 2xx status code
func (o *GetUsersUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get users unprocessable entity response has a 3xx status code
func (o *GetUsersUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get users unprocessable entity response has a 4xx status code
func (o *GetUsersUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this get users unprocessable entity response has a 5xx status code
func (o *GetUsersUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this get users unprocessable entity response a status code equal to that given
func (o *GetUsersUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

func (o *GetUsersUnprocessableEntity) Error() string {
	return fmt.Sprintf("[GET /users][%d] getUsersUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *GetUsersUnprocessableEntity) String() string {
	return fmt.Sprintf("[GET /users][%d] getUsersUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *GetUsersUnprocessableEntity) GetPayload() *models.MainErrorResponse {
	return o.Payload
}

func (o *GetUsersUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MainErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetUsersOKBody get users o k body
swagger:model GetUsersOKBody
*/
type GetUsersOKBody struct {
	models.MainUsersResponse

	// users
	Users []*models.MainUser `json:"users"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetUsersOKBody) UnmarshalJSON(raw []byte) error {
	// GetUsersOKBodyAO0
	var getUsersOKBodyAO0 models.MainUsersResponse
	if err := swag.ReadJSON(raw, &getUsersOKBodyAO0); err != nil {
		return err
	}
	o.MainUsersResponse = getUsersOKBodyAO0

	// GetUsersOKBodyAO1
	var dataGetUsersOKBodyAO1 struct {
		Users []*models.MainUser `json:"users"`
	}
	if err := swag.ReadJSON(raw, &dataGetUsersOKBodyAO1); err != nil {
		return err
	}

	o.Users = dataGetUsersOKBodyAO1.Users

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetUsersOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	getUsersOKBodyAO0, err := swag.WriteJSON(o.MainUsersResponse)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getUsersOKBodyAO0)
	var dataGetUsersOKBodyAO1 struct {
		Users []*models.MainUser `json:"users"`
	}

	dataGetUsersOKBodyAO1.Users = o.Users

	jsonDataGetUsersOKBodyAO1, errGetUsersOKBodyAO1 := swag.WriteJSON(dataGetUsersOKBodyAO1)
	if errGetUsersOKBodyAO1 != nil {
		return nil, errGetUsersOKBodyAO1
	}
	_parts = append(_parts, jsonDataGetUsersOKBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get users o k body
func (o *GetUsersOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.MainUsersResponse
	if err := o.MainUsersResponse.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUsers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetUsersOKBody) validateUsers(formats strfmt.Registry) error {

	if swag.IsZero(o.Users) { // not required
		return nil
	}

	for i := 0; i < len(o.Users); i++ {
		if swag.IsZero(o.Users[i]) { // not required
			continue
		}

		if o.Users[i] != nil {
			if err := o.Users[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getUsersOK" + "." + "users" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getUsersOK" + "." + "users" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get users o k body based on the context it is used
func (o *GetUsersOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.MainUsersResponse
	if err := o.MainUsersResponse.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateUsers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetUsersOKBody) contextValidateUsers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Users); i++ {

		if o.Users[i] != nil {
			if err := o.Users[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getUsersOK" + "." + "users" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getUsersOK" + "." + "users" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetUsersOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetUsersOKBody) UnmarshalBinary(b []byte) error {
	var res GetUsersOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
